{"version":3,"sources":["api/metaWeather.ts","components/WeatherForecastWidget/SearchBar.tsx","components/WeatherForecastWidget/roundingHelpers.ts","components/WeatherForecastWidget/WeatherCardLarge.tsx","components/WeatherForecastWidget/WeatherCardSmall.tsx","components/WeatherForecastWidget/WeatherForecastWidget.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","getLocationData","query","a","url","latitude","longitude","fetch","res","ok","json","parsedRes","getWeatherData","woeid","SearchBar","state","locationQuery","locationList","handleSearch","event","metaWeather","target","value","setState","handleLocationListSelect","index","selectedLocation","toString","weatherData","props","updateWidgetState","title","className","debounceTimeout","onChange","this","placeholder","type","onClick","handleGeolocation","map","location","React","Component","roundingHelpers","num","dec","undefined","rounded","Math","round","Number","EPSILON","WeatherCardLarge","consolidated_weather","day","applicable_date","src","weather_state_abbr","weather_state_name","min_temp","max_temp","wind_direction_compass","wind_speed","WeatherCardSmall","WeatherForecastWidget","loading","data","navigator","geolocation","getCurrentPosition","position","coords","alert","prevProps","href","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22f5dbb7.chunk.js","sourcesContent":["// proxied to \"https://www.metaweather.com\" in setupProxy.js\nconst baseUrl = '/api';\n\nconst getLocationData = async (query: string | {latitude: number; longitude: number}) => {\n  let url = baseUrl;\n  if( typeof query === 'object') {\n    url += `/location/search/?lattlong=${query.latitude},${query.longitude}`;\n  } else {\n    url += `/location/search/?query=${query}`;\n  }\n  const res = await fetch(url);\n  if (res.ok) {\n    const parsedRes = await res.json();\n    return parsedRes;\n  }\n};\n\nconst getWeatherData = async (woeid: string) => {\n  const url = `${baseUrl}/location/${woeid}`;\n  const res = await fetch(url);\n  if (res.ok) {\n    const parsedRes = await res.json();\n    return parsedRes;\n  }\n};\n\nexport default {\n  getLocationData,\n  getWeatherData\n};\n","import '../../../node_modules/@fortawesome/fontawesome-free/css/all.css';\nimport React from 'react';\nimport metaWeather from '../../api/metaWeather';\nimport { DebounceInput } from 'react-debounce-input';\nimport { metaWeatherLocationSearchResponse } from '../../api/types';\nimport './styles.css';\n\ntype searchBarState = {\n    locationQuery: string,\n    locationList: metaWeatherLocationSearchResponse[]\n}\n\nexport default class SearchBar extends React.Component<any> {\n    state: searchBarState = {\n      locationQuery: '',\n      locationList: []\n    }\n\n    handleSearch = async (event: any) => {\n      const locationList = await metaWeather.getLocationData(event.target.value);\n      this.setState({\n        locationQuery: event.target.value,\n        locationList\n      });\n    }\n\n    handleLocationListSelect = async (index: number) => {\n      const selectedLocation = this.state.locationList[index];\n      const weatherData = await metaWeather.getWeatherData(selectedLocation.woeid.toString());\n      this.props.updateWidgetState({\n        weatherData\n      });\n      this.setState({\n        locationQuery: selectedLocation.title,\n        locationList: []\n      });\n    }\n\n    render() {\n      return <div className=\"searchBar\">\n        <div className=\"input-group col-sm-12\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">\n              <i className=\"fas fa-search\"/>\n            </span>\n          </div>\n\n          <DebounceInput debounceTimeout={500} onChange={(event: any) => this.handleSearch(event)} value={this.state.locationQuery} placeholder=\"Search\"/>\n\n          <div className=\"input-group-append \">\n            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={this.props.handleGeolocation}><i className=\"fas fa-map-marker-alt\"/></button>\n          </div>\n        </div>\n\n        <ul className=\"list-group\">\n          {this.state.locationList?.map((location: metaWeatherLocationSearchResponse, index: number ) => {\n            return <li key={index} className=\"list-group-item searchResult\" onClick={() => this.handleLocationListSelect(index)}>{location.title}</li>;\n          })}\n        </ul>\n      </div>;\n    }\n}\n","const roundingHelpers = (num: number | undefined, dec?: number) => {\n  if(num === undefined) {\n    return;\n  }\n  const rounded = Math.round((num + Number.EPSILON) * 100);\n  if(dec) {\n    return rounded / dec;\n  }\n  return rounded;\n};\n\nexport default roundingHelpers;\n","import React from 'react';\nimport { consolidatedWeatherObject } from '../../api/types';\nimport roundingHelpers from './roundingHelpers';\n\ntype weatherCardLargeState = {\n  consolidated_weather: consolidatedWeatherObject | null,\n}\n\nexport default class WeatherCardLarge extends React.Component<any> {\n\n    state: weatherCardLargeState = {\n      consolidated_weather: null\n    }\n\n    componentDidMount() {\n      this.setState({\n        consolidated_weather: this.props.weatherData\n      });\n\n    }\n\n    render() {\n      const day = this.state.consolidated_weather;\n      return <div className=\"col-sm-12\">\n        <div className=\"card bg-transparent border-0\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <h2>Today</h2>\n                <h2>{day?.applicable_date}</h2>\n                <img src={`https://www.metaweather.com/static/img/weather/${day?.weather_state_abbr}.svg`}/>\n                <h3>{day?.weather_state_name}</h3>\n              </div>\n\n              <div className=\"col-sm-6\">\n                <div className=\"WeatherLargeCardDetails\">\n                  <ul>\n                    <li>Min <i className=\"fas fa-temperature-low\"/> {roundingHelpers(day?.min_temp, 100)}°C</li>\n                    <li>Max <i className=\"fas fa-temperature-high\"/> {roundingHelpers(day?.max_temp, 100)}°C</li>\n                    <li><i className=\"fas fa-wind\"/> Direction: {day?.wind_direction_compass}</li>\n                    <li><i className=\"fas fa-wind\"/> Speed: {roundingHelpers(day?.wind_speed, 100)}mph</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>;\n    }\n}\n","import React from 'react';\nimport { consolidatedWeatherObject } from '../../api/types';\nimport roundingHelpers from './roundingHelpers';\n\ntype weatherCardSmallState = {\n    consolidated_weather: consolidatedWeatherObject | null,\n}\n\nexport default class WeatherCardSmall extends React.Component<any> {\n\n    state: weatherCardSmallState = {\n      consolidated_weather: null\n    }\n    componentDidMount() {\n      this.setState({\n        consolidated_weather: this.props.weatherData\n      });\n    }\n    \n    render() {\n      const day = this.state.consolidated_weather;\n      return <div className=\"col-sm-4\">\n        <div className=\"card bg-transparent border-0\">\n          <div className=\"card-body\">\n            <h2>{day?.applicable_date}</h2>\n            <img src={`https://www.metaweather.com/static/img/weather/${day?.weather_state_abbr}.svg`}/>\n            <h3>{day?.weather_state_name}</h3>\n            <ul>\n              <li>Min <i className=\"fas fa-temperature-low\"/> {roundingHelpers(day?.min_temp, 100)}°C</li>\n              <li>Max <i className=\"fas fa-temperature-high\"/> {roundingHelpers(day?.max_temp, 100)}°C</li>\n              <li><i className=\"fas fa-wind\"/> Direction: {day?.wind_direction_compass}</li>\n              <li><i className=\"fas fa-wind\"/> Speed: {roundingHelpers(day?.wind_speed, 100)}mph</li>\n            </ul>\n          </div>\n        </div>\n      </div>;\n    }\n}\n","import React from 'react';\nimport './styles.css';\nimport SearchBar from './SearchBar';\nimport WeatherCardLarge from './WeatherCardLarge';\nimport metaWeather from '../../api/metaWeather';\nimport { metaWeatherLocationResponse, consolidatedWeatherObject } from '../../api/types';\nimport WeatherCardSmall from './WeatherCardSmall';\n\ntype WeatherForecastWidgetState = {\n  weatherData: metaWeatherLocationResponse | null,\n  loading: boolean\n}\n\nexport default class WeatherForecastWidget extends React.Component<any> {\n  state: WeatherForecastWidgetState = {\n    weatherData: null,\n    loading: true\n  }\n\n  async componentDidMount() {\n    this.handleGeolocation();\n  }\n\n  // re-render child components on state change\n  componentDidUpdate(prevProps: metaWeatherLocationResponse) {\n    if(prevProps.title !== this.props.title) {\n      this.setState({ title: this.props.title });\n    }\n  }\n\n  // lets child components update parent component\n  updateWidgetState = (data: {}) => {\n    this.setState({ loading: true });\n    this.setState(data);\n    this.setState({ loading: false });\n  }\n  \n  // handles geolocation from browser search\n  // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition\n  handleGeolocation = () => {\n    if (navigator.geolocation) {\n      let geolocation: {latitude?: number, longitude?: number} = {};\n      navigator.geolocation.getCurrentPosition(async (position: any) => {\n        const geolocation = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        if(geolocation.latitude && geolocation.longitude) {\n          const location = await metaWeather.getLocationData(geolocation);\n          const weatherData = await metaWeather.getWeatherData(location[0].woeid);\n          this.updateWidgetState({\n            weatherData\n          });\n        }\n      });\n    } else {\n      alert('Geolocation is not supported by this browser.');\n    }\n  }\n\n  render() {\n    return <div className=\"WeatherForecastWidget\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h1><a href=\"https://www.metaweather.com/\">MetaWeather</a> @ {this.state.weatherData?.title}</h1>\n        </div>\n\n        <div className=\"row\">\n          <SearchBar updateWidgetState={this.updateWidgetState} handleGeolocation={this.handleGeolocation}></SearchBar>\n        </div>\n\n        <div className=\"row\">\n          {\n            this.state.loading\n              ? <div>Loading</div>\n              : <WeatherCardLarge weatherData={this.state.weatherData?.consolidated_weather[0]}></WeatherCardLarge>\n          }\n        </div>\n\n        <div className=\"row\">\n          {/*parse the 2nd to 4th value of consolidated_weather array to display next 3 days of weather*/}\n          {\n            this.state.loading\n              ? <div>Loading</div>\n              : this.state.weatherData?.consolidated_weather.slice(1,4).map((day: consolidatedWeatherObject) => {\n                return <WeatherCardSmall weatherData={day}></WeatherCardSmall>;\n              })\n          }\n        </div>\n      </div>\n    </div>;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport WeatherForecastWidget from './components/WeatherForecastWidget/WeatherForecastWidget';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherForecastWidget></WeatherForecastWidget>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}